# Generated by Django 4.2.17 on 2025-02-13 17:57

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("library", "0032_license_text_codemeta_snapshot"),
    ]

    operations = [
        migrations.CreateModel(
            name="CodebaseGitMirror",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("last_modified", models.DateTimeField(auto_now=True)),
                (
                    "built_releases",
                    models.ManyToManyField(
                        related_name="+", to="library.codebaserelease"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ImportedReleasePackage",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("last_modified", models.DateTimeField(auto_now=True)),
                (
                    "service",
                    models.CharField(
                        choices=[("github", "GitHub")],
                        help_text="The external service where the release is hosted",
                        max_length=32,
                    ),
                ),
                (
                    "uid",
                    models.CharField(
                        help_text="Unique identifier for this external release e.g. github release id",
                        max_length=128,
                        unique=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the release, ideally the tag name if applicable",
                        max_length=255,
                    ),
                ),
                (
                    "display_name",
                    models.CharField(
                        blank=True,
                        help_text="A human-readable name for the release, if different from the name",
                        max_length=255,
                    ),
                ),
                (
                    "html_url",
                    models.URLField(
                        blank=True,
                        help_text="URL to the (browser-viewable) page for the release on the external service",
                    ),
                ),
                (
                    "download_url",
                    models.URLField(
                        blank=True,
                        help_text="URL to the downloadable package for the release on the external service, ideally a zipball such as in the case of github",
                    ),
                ),
                (
                    "extra_data",
                    models.JSONField(
                        default=dict,
                        help_text="Additional data for the external release, ideally the full object (e.g. github release) from the external service",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="GithubIntegrationAppInstallation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("github_user_id", models.BigIntegerField(unique=True)),
                ("github_login", models.CharField(max_length=255)),
                ("installation_id", models.BigIntegerField(unique=True)),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("last_modified", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="github_integration_app_installation",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CodebaseGitRemote",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "is_user_repo",
                    models.BooleanField(
                        default=False, help_text="Whether this is a user-owned remote"
                    ),
                ),
                (
                    "is_preexisting",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this remote was pre-existing or based on a codebase git mirror",
                    ),
                ),
                (
                    "should_push",
                    models.BooleanField(
                        default=True, help_text="Whether to push to this remote"
                    ),
                ),
                (
                    "should_import",
                    models.BooleanField(
                        default=False,
                        help_text="Whether to import new releases from this remote",
                    ),
                ),
                ("repo_name", models.CharField(max_length=100)),
                (
                    "owner",
                    models.CharField(
                        help_text="Github username (or organization) who owns the remote repository",
                        max_length=100,
                    ),
                ),
                (
                    "url",
                    models.URLField(
                        blank=True, help_text="http URL of remote repository"
                    ),
                ),
                ("last_push_log", models.TextField(blank=True)),
                ("last_archive_log", models.TextField(blank=True)),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("last_modified", models.DateTimeField(auto_now=True)),
                (
                    "mirror",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="remotes",
                        to="library.codebasegitmirror",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="codebase",
            name="git_mirror",
            field=models.OneToOneField(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="codebase",
                to="library.codebasegitmirror",
            ),
        ),
        migrations.AddField(
            model_name="codebaserelease",
            name="imported_release_package",
            field=models.OneToOneField(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="library.importedreleasepackage",
            ),
        ),
        migrations.AddConstraint(
            model_name="codebasegitremote",
            constraint=models.UniqueConstraint(
                condition=models.Q(("is_user_repo", True), ("should_push", True)),
                fields=("mirror",),
                name="single_pushable_user_repo",
            ),
        ),
        migrations.AddConstraint(
            model_name="codebasegitremote",
            constraint=models.UniqueConstraint(
                condition=models.Q(("is_user_repo", False), ("should_push", True)),
                fields=("mirror",),
                name="single_pushable_org_repo",
            ),
        ),
        migrations.AddConstraint(
            model_name="codebasegitremote",
            constraint=models.UniqueConstraint(
                condition=models.Q(("should_import", True)),
                fields=("mirror",),
                name="single_archivable_repo",
            ),
        ),
        migrations.AddConstraint(
            model_name="codebasegitremote",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("is_user_repo", True), ("should_import", False), _connector="OR"
                ),
                name="org_repo_not_archivable",
            ),
        ),
        migrations.AddConstraint(
            model_name="codebasegitremote",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("is_preexisting", False), ("should_push", False), _connector="OR"
                ),
                name="preexisting_repo_not_pushable",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="codebasegitremote",
            unique_together={("owner", "repo_name")},
        ),
    ]
