# Generated by Django 4.2.21 on 2025-06-11 23:44

import core.fields
from django.db import migrations, models
import django.db.models.deletion
import modelcluster.fields
import wagtail.search.index


def populate_github_sync_faq_entries(apps, schema_editor):
    """populate GitHub Sync FAQ entries with default content"""
    GitHubSyncConfiguration = apps.get_model("library", "GitHubSyncConfiguration")
    GitHubSyncFaqEntry = apps.get_model("library", "GitHubSyncFaqEntry")
    Site = apps.get_model("wagtailcore", "Site")
    site = Site.objects.get(is_default_site=True)
    # create the configuration
    config, _ = GitHubSyncConfiguration.objects.get_or_create(site=site)

    faq_data = [
        {
            "question": "What GitHub permissions do you request and why?",
            "answer": """We request read and write access to repository contents. You can either select specific repositories or allow access to all current and future repositories (though we will not attempt to access any repositories besides those synced).

If you choose the selection option, ensure that the repository you want to sync is included, which may require updating the selection after creating a blank repository if you are setting up a new sync from scratch.""",
        },
        {
            "question": "How often do you check for updates from GitHub?",
            "answer": """GitHub releases are imported immediately when published through GitHub webhooks. As soon as you publish a release on GitHub (not a draft or pre-release), our system receives a notification and begins the import process, typically completing within a few minutes.

There is no polling delay or waiting period.""",
        },
        {
            "question": "Can I sync with a private repository?",
            "answer": "No, only public GitHub repositories are supported at the moment.",
        },
        {
            "question": "Can releases imported to the Model Library from GitHub be peer reviewed?",
            "answer": """Yes. Imported releases will be unpublished initially, allowing you to request a peer review or publish them. However, once a release is published, you can no longer request a review.

While under peer review, the release remains private. If changes are requested, you must push changes to GitHub, create a new tag, and update the existing release to reference the new tag.""",
        },
        {
            "question": "If I set up importing for an existing repository, will my existing releases be imported?",
            "answer": """No, only future releases will be imported. This is to prevent duplicate releases from being created.

However, you can import existing releases by changing the release on GitHub to a pre-release and then back to a published release to alert the importing system. To do this:

1. Edit the GitHub release and mark the 'Set as a pre-release' checkbox
2. Update the release
3. Un-check the 'Set as a pre-release' checkbox
4. Update the release again""",
        },
        {
            "question": "I created a GitHub release but don't see it on the CoMSES Model Library side, what went wrong?",
            "answer": """Ensure that the GitHub app is installed and has access to the repository, you can check your GitHub app installation status through the configuration page for your model.

Also, check that the release is **published** (not a draft or in pre-release mode) and has a unique version number.

In the unlikely event of a network error, you can try setting the release on GitHub as a pre-release and then back to published to alert the importing system again. To do this:

1. Edit the GitHub release and mark the 'Set as a pre-release' checkbox
2. Update the release
3. Un-check the 'Set as a pre-release' checkbox
4. Update the release again

If issues persist, please contact us.""",
        },
        {
            "question": "I set up a new synced repository or published a new release on CoMSES, but I don't see anything on the GitHub repository, what went wrong?",
            "answer": """If changes were made to a branch on GitHub, the sync process will not overwrite them. Ensure that the GitHub app is installed and has access to the repository, you can check your GitHub app installation status through the configuration page for your model.

In the unlikely event of a network error, you can manually trigger a push by toggling 'Pushing' off and on again.

Sometimes, uninstalling and reinstalling the GitHub app can help if the system failed to recognize the installation previously. You can access the GitHub app installation through the configuration page for your model.

If issues persist, please contact us.""",
        },
        {
            "question": "How do I uninstall or reinstall the GitHub Sync app?",
            "answer": """To manage the GitHub app installation:

1. Go to your GitHub Settings → Applications → Installed GitHub Apps
2. Find 'CoMSES Model Library Sync' in the list
3. Click 'Configure' to modify repository access or 'Uninstall' to remove it completely

To reinstall, simply set up GitHub sync again from your model's configuration page in the CoMSES Model Library, which will prompt you to authorize the app again.""",
        },
    ]

    for i, faq_item in enumerate(faq_data):
        GitHubSyncFaqEntry.objects.get_or_create(
            configuration=config,
            question=faq_item["question"],
            defaults={
                "answer": faq_item["answer"],
                "order": i + 1,
            },
        )


class Migration(migrations.Migration):

    dependencies = [
        ("wagtailcore", "0089_log_entry_data_json_null_to_object"),
        (
            "library",
            "0034_rename_last_archive_log_codebasegitremote_last_import_log_and_more",
        ),
    ]

    operations = [
        migrations.CreateModel(
            name="GitHubSyncConfiguration",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "enable_new_syncs",
                    models.BooleanField(
                        default=True,
                        help_text="Disabling will prevent new synced repositories from being set up, existing syncs will remain active, visible, and editable.",
                    ),
                ),
                (
                    "is_beta",
                    models.BooleanField(
                        default=True,
                        help_text="Mark the GitHub Sync feature as a beta feature",
                    ),
                ),
                (
                    "site",
                    models.OneToOneField(
                        editable=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="wagtailcore.site",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="GitHubSyncFaqEntry",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "question",
                    models.CharField(help_text="The FAQ question", max_length=500),
                ),
                (
                    "answer",
                    core.fields.MarkdownField(
                        blank=True,
                        help_text="The FAQ answer in Markdown format",
                        rendered_field=True,
                    ),
                ),
                (
                    "answer_markup_type",
                    models.CharField(
                        choices=[
                            ("", "--"),
                            ("markdown", "markdown"),
                            ("html", "html"),
                            ("plain", "plain"),
                            ("", ""),
                        ],
                        default="markdown",
                        max_length=30,
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Order in which this FAQ entry should appear",
                    ),
                ),
                ("_answer_rendered", models.TextField(editable=False)),
                (
                    "configuration",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="faq_entries",
                        to="library.githubsyncconfiguration",
                    ),
                ),
            ],
            options={
                "ordering": ["order", "id"],
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.RunPython(
            populate_github_sync_faq_entries,
            migrations.RunPython.noop,
        ),
    ]
